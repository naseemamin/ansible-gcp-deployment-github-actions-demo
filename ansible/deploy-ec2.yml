- hosts: localhost
  gather_facts: no
  tasks:
  - name:
    pip:
      name: boto3
      state: present

  - name: Terminate existing ansible_demo instances
    amazon.aws.ec2_instance:
      state: absent
      region: "{{ region }}"
      filters:
        "tag:Name": "ansible_demo"
      aws_access_key: "{{ access_key }}"
      aws_secret_key: "{{ secret_key }}"

  - amazon.aws.ec2_vpc_subnet_info:
      aws_access_key: "{{ secrets.access_key }}"
      aws_secret_key: "{{ secrets.secret_key }}"
      region: "{{ secrets.region }}"
    register: subnet_info

  - name: Creating Security Group for ansible_demo ec2 on AWS
    amazon.aws.ec2_group:
      name: WebSG
      description: Security Group for Web Server allowing port for http and ssh
      region: "{{ secrets.region }}"
      aws_access_key: "{{ secrets.access_key }}"
      aws_secret_key: "{{ secrets.secret_key }}"
      rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0

  - name: create a new EC2 key pair, returns generated private key
    amazon.aws.ec2_key:
      name: webkey
      region: "{{ secrets.region }}"
      aws_access_key: "{{ secrets.access_key }}"
      aws_secret_key: "{{ secrets.secret_key }}"
      key_material: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"

  - name: launching ec2 instance for ansible_demo
    amazon.aws.ec2_instance:
      key_name: webkey
      instance_type: t2.micro
      image_id: ami-0dfcb1ef8550277af
      wait: true
      security_group: WebSG
      count: 1
      vpc_subnet_id: "{{ subnet_info.subnets[0].id }}"
      network:
        assign_public_ip: true
      region: "{{ secrets.region }}"
      state: running
      aws_access_key: "{{ secrets.access_key }}"
      aws_secret_key: "{{ secrets.secret_key }}"
      tags:
        Name: ansible_demo
    register: ec2

  - name: Add new instance to host group
    add_host:
      hostname: "{{ item.public_ip_address }}"
      groupname: ansible_demo
    loop: "{{ ec2.instances }}"

  - name: Wait for SSH to come up
    wait_for:
      host: "{{ item.public_dns_name }}"
      port: 22
      state: started
    loop: "{{ ec2.instances }}"

- hosts: ansible_demo
  gather_facts: no
  tasks:
  - name: running role
    include_role:
      name: httpdserver
