# "connect" to localhost to execute commands
- hosts: localhost
  gather_facts: no
  tasks:
  - name:
    # confirm that the google-auth and google-cloud-sdk Python packages are installed using pip
    pip:
      name:
        - google-auth
        - google-cloud-compute
      state: present

  # delete GCP instances named "ansible-demo" by declaring a goal state of absent (deleted)
  # https://docs.ansible.com/ansible/latest/collections/google/cloud/gcp_compute_instance_module.html
  - name: delete existing ansible-demo instances
    google.cloud.gcp_compute_instance:
      name: ansible-demo
      project: "{{ lookup('ansible.builtin.env','project_id') }}"
      zone: "{{ lookup('ansible.builtin.env','zone') }}"
      auth_kind: serviceaccount
      service_account_contents: "{{ lookup('ansible.builtin.env','credentials_file') }}"
      state: absent

  # look-up the list of subnets and register the output and store it as variable "subnet_info"
  # https://docs.ansible.com/ansible/latest/collections/google/cloud/gcp_compute_subnetwork_info_module.html
  - name: get subnet info
    google.cloud.gcp_compute_subnetwork_info:
      project: "{{ lookup('ansible.builtin.env','project_id') }}"
      region: us-central1
      auth_kind: serviceaccount
      service_account_contents: "{{ lookup('ansible.builtin.env','credentials_file') }}"
    register: subnet_info

  # create firewall rule to allow incoming traffic on port 80 (HTTP)
  # https://docs.ansible.com/ansible/latest/collections/google/cloud/gcp_compute_firewall_module.html
  - name: allow HTTP traffic
    google.cloud.gcp_compute_firewall:
      project: "{{ lookup('ansible.builtin.env','project_id') }}"
      name: allow-http
      auth_kind: serviceaccount
      service_account_contents: "{{ lookup('ansible.builtin.env','credentials_file') }}"
      network: {"selfLink": "global/networks/default"}
      allowed:
      - ip_protocol: tcp
        ports:
        - "80"

  # create instance with a startup script that installs Apache HTTP Server
  # https://docs.ansible.com/ansible/latest/collections/google/cloud/gcp_compute_instance_module.html
  - name: create GCP instance
    google.cloud.gcp_compute_instance:
      name: ansible-demo
      project: "{{ lookup('ansible.builtin.env','project_id') }}"
      zone: "{{ lookup('ansible.builtin.env','zone') }}"
      auth_kind: serviceaccount
      service_account_contents: "{{ lookup('ansible.builtin.env','credentials_file') }}"
      machine_type: f1-micro
      disks:
      - boot: true
        auto_delete: true
        initialize_params:
          source_image: projects/debian-cloud/global/images/debian-10-buster-v20230206
      network_interfaces:
      - access_configs:
        - name: External NAT
          type: ONE_TO_ONE_NAT
        network: {"selfLink": "global/networks/default"}
      metadata:
        items:
        - key: startup-script
          value: |
            #!/bin/bash
            sudo apt-get update
            sudo apt-get install -y apache2
      tags:
        items:
        - http-server
    register: gcp_compute_instance

  - debug:
      var: gcp_compute_instance

  - name: add newly created instance to GCP instance group
    add_host:
      hostname: "{{ item.networkInterfaces[0].accessConfigs[0].natIP }}"
      groupname: ansible_demo_host_group
    loop: "{{ gcp_compute_instance['networkInterfaces'] }}"

    # connect to GCP instances to run the httpd
- hosts: ansible_demo_host_group
  gather_facts: no
  remote_user: "{{ lookup('ansible.builtin.env','remote_user') }}"
  become_method: sudo 
  become: yes
  tasks:
  - name: running role
    include_role:
      name: httpdserver

